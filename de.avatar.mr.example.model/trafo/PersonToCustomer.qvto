// these are the model A requirements
modeltype MODEL "strict" uses model('http://avatar.de/mr/person/1.0');
// these are the model B requirements (in our example is the same as mpdel A)
//modeltype DBTREE "strict" uses dbtree('http://avatar.de/mr/modelB/1.0');



transformation PerosnToCustomer(in model: MODEL, out model : MODEL);

/*
/In the main() you need to specify which kind of objects you want to map from model A to model B.
/In the example below we are saying to take all the object of class ClassInModelA of the model A and to map them
/to model B through the map toModelB(), which is defined below.
*/ 
main() {
	model.rootObjects()[Person]->map toCustomer();
}


/*
/Here you specify what the map toModelB() does. The syntax is always the same as here. In the map body you link
/the attributes in model B to the ones in model A. The notation self refers to the model A.
/With the . you map one element of A into one element of B. With -> instead you map all elements of A into all elements
/of B (use this for lists of objects). When the two properties you need to map are not of the same type you could use a 
/query to map them (see in the library).
*/
mapping model::Person::toCustomer() : model::Customer {
	
	id := self.id;
	firstName := self.firstName;
	lastName := self.lastaName;
	birthDate := self.birthDate;
	contact := self.contact.value;
}


